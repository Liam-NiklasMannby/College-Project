
AVRASM ver. 2.2.7  C:\Users\Liam-Niklas Mannby\Documents\Atmel Studio\7.0\Mk2\Mk2\main.asm Wed Jul 11 11:55:56 2018

[builtin](2): Including file 'C:\Users\Liam-Niklas Mannby\Documents\Atmel Studio\7.0\Mk2\Mk2\m32adef.inc'
C:\Users\Liam-Niklas Mannby\Documents\Atmel Studio\7.0\Mk2\Mk2\main.asm(5): Including file 'C:\Users\Liam-Niklas Mannby\Documents\Atmel Studio\7.0\Mk2\Mk2\m32Adef.inc'
[builtin](2): Including file 'C:\Users\Liam-Niklas Mannby\Documents\Atmel Studio\7.0\Mk2\Mk2\m32adef.inc'
C:\Users\Liam-Niklas Mannby\Documents\Atmel Studio\7.0\Mk2\Mk2\main.asm(5): Including file 'C:\Users\Liam-Niklas Mannby\Documents\Atmel Studio\7.0\Mk2\Mk2\m32Adef.inc'
                                 
                                 ; Mk2.asm
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32A.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32ADEF_INC_
                                 #define _M32ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32A
                                 #pragma AVRPART ADMIN PART_NAME ATmega32A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32ADEF_INC_ */
                                 
                                 ;
                                 ; Created: 23/05/2018 14:35:13
                                 ; Author : Liam-Niklas Mannby
                                 .include "m32Adef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32A.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32ADEF_INC_
                                 
                                 #endif  /* _M32ADEF_INC_ */
                                 .DSEG
                                 ;Keys            Defines variables to the hex code for the character being sent
                                 .EQU leta=0x1c
                                 .EQU letb=0x32
                                 .EQU letc=0x21
                                 .EQU letd=0x23
                                 .EQU lete=0x24
                                 .EQU letf=0x2b
                                 .EQU letg=0x34
                                 .EQU leth=0x33
                                 .EQU leti=0x43
                                 .EQU letj=0x3b
                                 .EQU num0=0x45
                                 .EQU num1=0x16
                                 .EQU num2=0x1e
                                 .EQU num3=0x26
                                 .EQU num4=0x25
                                 .EQU num5=0x2e
                                 .EQU num6=0x36
                                 .EQU num7=0x3d
                                 .EQU num8=0x3e
                                 .EQU num9=0x46
                                 .EQU stop=0xf0 ;sent to signify next key byte is being released
                                 ;Responses
                                 .EQU ACK=0xfa ;acknowlegde
                                 .EQU BAT=0xaa ;self test passed
                                 .EQU ECH=0xee ;echo, same as host command
                                 .EQU RES=0xfe ;resend, same as host command
                                 ;Host Commands
                                 .EQU LED1=0xed ;write LEDs, followed by another byte
                                 .EQU RID=0xf2 ;read keyboard ID, respond with ack
                                 .EQU SRR=0xf3 ;set repeat rate and delay
                                 .EQU KEN=0xf4 ;enable keyboard after transmission failure
                                 .EQU DIS=0xf5 ;disable keyboard
                                 .EQU DEF=0xf6 ;resets keyboard to defaults
                                 .EQU RST=0xff ;run self test
                                 .CSEG
                                 INIT:
000000 e000                      	LDI r16, 0b00000000 ;Values for output/input ports
000001 e810                      	LDI r17, 0b10000000
000002 e021                      	LDI r18, 0b00000001
000003 bb0a                      	OUT DDRA, r16 ;all pins in port A as inputs
000004 bb17                      	OUT DDRB, r17 ;only pin7 as output on port B
000005 bb04                      	OUT DDRC, r16 ;all pins in port C as inputs
000006 bb21                      	OUT DDRD, r18 ;only pin0 as output on port D
                                 Main: ;Scans inputs and branch off if any pin on any port is activated, loops
000007 b379                      	IN r23,PINA
000008 1170                      	CPSE r23,r0 ;compares the value of the inputs on porta against zero, goes to next step if not equal
000009 940c 0078                 	jmp a_h
00000b b373                      	IN r23,PINC
00000c 1170                      	CPse r23,r0
00000d 940c 00a2                 	jmp i_5
00000f b370                      	IN r23,PIND
000010 1170                      	CPse r23,r0
000011 940c 00cc                 	jmp six_9
000013 940c 0007                 	jmp Main
                                 Recieve: ;stores insctruction sent by the host
000015 e0e8                      	LDI r30,8
                                 	loop1:
000016 940e 01fd                 	call Wait
000018 9a90                      	sbi PORTD,0
000019 940e 01fd                 	call Wait
00001b 9890                      	cbi PORTD,0
00001c b390                      	IN r25,PIND
00001d 7092                      	ANDI r25,0b00000010
00001e 9596                      	LSR r25
00001f 0f69                      	ADD r22,r25
000020 0f66                      	LSL r22
000021 95ea                      	dec r30
000022 f799                      	BRNE loop1
000023 e0e8                      	LDI r30,8
                                 	loop2:
000024 940e 01fd                 	call Wait
000026 0000                      	nop
000027 95ea                      	dec r30
000028 f7d9                      	brne loop2
000029 940c 002b                 	jmp Incoming
                                 Incoming: ;checks which instruction was sent by host where instruction  is stored in r22 and compared against constants
00002b 3e6d                      	CPI r22,LED1
00002c f0a9                      	BREQ led2
00002d 3f62                      	CPI r22,RID
00002e f0e9                      	BREQ read_id
00002f 3f63                      	CPI r22,SRR
000030 f101                      	BREQ srr1
000031 3f64                      	CPI r22,KEN
000032 f141                      	BREQ enable
000033 3f65                      	CPI r22,DIS
000034 f159                      	BREQ disable
000035 3f66                      	CPI r22,DEF
000036 f171                      	BREQ default
000037 3f6f                      	CPI r22,RST
000038 f189                      	BREQ self_test
000039 3e6e                      	CPI r22,ECH
00003a f1a1                      	BREQ echo_in
00003b 3f6e                      	CPI r22,RES
00003c f1b9                      	BREQ resend_in
00003d ef3e                      	LDI r19,RES
00003e 940e 01c3                 	call Send
000040 940c 0007                 	jmp Main
                                 led2: ;waits for two bytes of data then responds with ack
                                 	loop3:
000042 e1e8                      	LDI r30,24
000043 940e 01fd                 	call Wait
000045 95ea                      	dec r30
000046 f7d9                      	brne loop3
000047 ef3a                      	LDI r19, ACK
000048 940e 01c3                 	call Send
00004a 940c 0007                 	jmp Main
                                 read_id:;haven't set an ID
00004c ef3a                      	LDI r19, ACK
00004d 940e 01c3                 	call Send
00004f 940c 0007                 	jmp Main
                                 srr1:;waits for repeat rate and typematic dealy bits then responds with ack
000051 e1e8                      	LDI r30,24
                                 	loop4:
000052 940e 01fd                 	call Wait
000054 95ea                      	dec r30
000055 f7e1                      	brne loop4
000056 ef3a                      	LDI r19, ACK
000057 940e 01c3                 	call Send
000059 940c 0007                 	jmp Main	
                                 enable:;ignoring this host command and just terminating giving correct response without doing anything
00005b ef3a                      	LDI r19, ACK
00005c 940e 01c3                 	call Send
00005e 940c 0007                 	jmp Main
                                 disable:;ignoring this host command and just terminating giving correct response without doing anything
000060 ef3a                      	LDI r19, ACK
000061 940e 01c3                 	call Send
000063 940c 0007                 	jmp Main
                                 default: ;defaults are irrelevent in this version so just respond with "acknowledge" signal
000065 ef3a                      	LDI r19, ACK
000066 940e 01c3                 	call Send
000068 940c 0007                 	jmp Main
                                 self_test: ;Respond saying self test passed
00006a ea3a                      	LDI r19,BAT
00006b 940e 01c3                 	call Send
00006d 940c 0007                 	jmp Main
                                 echo_in: ;respond with echo
00006f ee3e                      	LDI r19,ECH
000070 940e 01c3                 	call send
000072 940c 0007                 	jmp Main
                                 resend_in:
000074 940e 01c3                 	call Send
000076 940c 0007                 	jmp Main
                                 a_h: ;Checks each pin in port a
000078 e0b1                      	LDI r27,1
000079 137b                      	CPse r23,r27 ;checks pin0
00007a 1000                      	cpse r0,r0
00007b 940c 00e7                 	jmp loada ;jumps to next stage if pin is active
00007d 0fbb                      	LSL r27
00007e 137b                      	CPse r23,r27
00007f 1000                      	cpse r0,r0
000080 940c 00f2                 	jmp loadb;jumps to next stage if pin is active
000082 0fbb                      	LSL r27
000083 137b                      	CPse r23,r27
000084 1000                      	cpse r0,r0
000085 940c 00fd                 	jmp loadc;jumps to next stage if pin is active
000087 0fbb                      	LSL r27
000088 137b                      	CPse r23,r27
000089 1000                      	cpse r0,r0
00008a 940c 0108                 	jmp loadd;jumps to next stage if pin is active
00008c 0fbb                      	LSL r27
00008d 137b                      	CPse r23,r27
00008e 1000                      	cpse r0,r0
00008f 940c 0113                 	jmp loade;jumps to next stage if pin is active
000091 0fbb                      	LSL r27
000092 137b                      	CPse r23,r27
000093 1000                      	cpse r0,r0
000094 940c 011e                 	jmp loadf;jumps to next stage if pin is active
000096 0fbb                      	LSL r27
000097 137b                      	CPse r23,r27
000098 1000                      	cpse r0,r0
000099 940c 0129                 	jmp loadg;jumps to next stage if pin is active
00009b 0fbb                      	LSL r27
00009c 137b                      	CPse r23,r27
00009d 1000                      	cpse r0,r0
00009e 940c 0134                 	jmp loadh;jumps to next stage if pin is active
0000a0 940c 0007                 	jmp Main ;returns to the start of the program if something went wrong
                                 i_5: ;checks each pin in port c, same comments as block above
0000a2 e0b1                      	LDI r27,1
0000a3 137b                      	CPse r23,r27
0000a4 1000                      	cpse r0,r0
0000a5 940c 013f                 	jmp loadi
0000a7 0fbb                      	LSL r27
0000a8 137b                      	CPse r23,r27
0000a9 1000                      	cpse r0,r0
0000aa 940c 014a                 	jmp loadj
0000ac 0fbb                      	LSL r27
0000ad 137b                      	CPse r23,r27
0000ae 1000                      	cpse r0,r0
0000af 940c 0155                 	jmp load0
0000b1 0fbb                      	LSL r27
0000b2 137b                      	CPse r23,r27
0000b3 1000                      	cpse r0,r0
0000b4 940c 0160                 	jmp load1
0000b6 0fbb                      	LSL r27
0000b7 137b                      	CPse r23,r27
0000b8 1000                      	cpse r0,r0
0000b9 940c 016b                 	jmp load2
0000bb 0fbb                      	LSL r27
0000bc 137b                      	CPse r23,r27
0000bd 1000                      	cpse r0,r0
0000be 940c 0176                 	jmp load3
0000c0 0fbb                      	LSL r27
0000c1 137b                      	CPse r23,r27
0000c2 1000                      	cpse r0,r0
0000c3 940c 0181                 	jmp load4
0000c5 0fbb                      	LSL r27
0000c6 137b                      	CPse r23,r27
0000c7 1000                      	cpse r0,r0
0000c8 940c 018c                 	jmp load5
0000ca 940c 0007                 	jmp Main
                                 six_9: ;checks the last four and second pins on port d, same comments as block above
0000cc e0b2                      	LDI r27,2
0000cd 137b                      	CPse r23,r27
0000ce 1000                      	cpse r0,r0
0000cf 940c 0015                 	jmp Recieve
0000d1 e8b0                      	LDI r27,0b10000000
0000d2 137b                      	CPse r23,r27
0000d3 1000                      	cpse r0,r0
0000d4 940c 0197                 	jmp load6
0000d6 95b6                      	LSR r27
0000d7 137b                      	CPse r23,r27
0000d8 1000                      	cpse r0,r0
0000d9 940c 01a2                 	jmp load7
0000db 95b6                      	LSR r27
0000dc 137b                      	CPse r23,r27
0000dd 1000                      	cpse r0,r0
0000de 940c 01ad                 	jmp load8
0000e0 95b6                      	LSR r27
0000e1 137b                      	CPse r23,r27
0000e2 1000                      	cpse r0,r0
0000e3 940c 01b8                 	jmp load9
0000e5 940c 0007                 	jmp Main
                                 ;the following load segments load r19 with the value of the key being pressed then use the send subroutine to send the key press and release signals then goes back to the start of the program
                                 loada:
0000e7 e13c                      	LDI r19,leta
0000e8 940e 01c3                 	call Send
0000ea ef30                      	LDI r19,stop
0000eb 940e 01c3                 	call send
0000ed e13c                      	LDI r19,leta
0000ee 940e 01c3                 	call Send
0000f0 940c 0007                 	jmp Main
                                 loadb:
0000f2 e332                      	LDI r19,letb
0000f3 940e 01c3                 	call Send
0000f5 ef30                      	LDI r19,stop
0000f6 940e 01c3                 	call send
0000f8 e332                      	LDI r19,letb
0000f9 940e 01c3                 	call Send
0000fb 940c 0007                 	jmp Main
                                 loadc:
0000fd e231                      	LDI r19,letc
0000fe 940e 01c3                 	call Send
000100 ef30                      	LDI r19,stop
000101 940e 01c3                 	call send
000103 e231                      	LDI r19,letc
000104 940e 01c3                 	call Send
000106 940c 0007                 	jmp Main
                                 loadd:
000108 e233                      	LDI r19,letd
000109 940e 01c3                 	call Send
00010b ef30                      	LDI r19,stop
00010c 940e 01c3                 	call send
00010e e233                      	LDI r19,letd
00010f 940e 01c3                 	call Send
000111 940c 0007                 	jmp Main
                                 loade:
000113 e234                      	LDI r19,lete
000114 940e 01c3                 	call Send
000116 ef30                      	LDI r19,stop
000117 940e 01c3                 	call send
000119 e234                      	LDI r19,lete
00011a 940e 01c3                 	call Send
00011c 940c 0007                 	jmp Main
                                 loadf:
00011e e23b                      	LDI r19,letf
00011f 940e 01c3                 	call Send
000121 ef30                      	LDI r19,stop
000122 940e 01c3                 	call send
000124 e23b                      	LDI r19,letf
000125 940e 01c3                 	call Send
000127 940c 0007                 	jmp Main
                                 loadg:
000129 e334                      	LDI r19,letg
00012a 940e 01c3                 	call Send
00012c ef30                      	LDI r19,stop
00012d 940e 01c3                 	call send
00012f e334                      	LDI r19,letg
000130 940e 01c3                 	call Send
000132 940c 0007                 	jmp Main
                                 loadh:
000134 e333                      	LDI r19,leth
000135 940e 01c3                 	call Send
000137 ef30                      	LDI r19,stop
000138 940e 01c3                 	call send
00013a e333                      	LDI r19,leth
00013b 940e 01c3                 	call Send
00013d 940c 0007                 	jmp Main
                                 loadi:
00013f e433                      	LDI r19,leti
000140 940e 01c3                 	call Send
000142 ef30                      	LDI r19,stop
000143 940e 01c3                 	call send
000145 e433                      	LDI r19,leti
000146 940e 01c3                 	call Send
000148 940c 0007                 	jmp Main
                                 loadj:
00014a e33b                      	LDI r19,letj
00014b 940e 01c3                 	call Send
00014d ef30                      	LDI r19,stop
00014e 940e 01c3                 	call send
000150 e33b                      	LDI r19,letj
000151 940e 01c3                 	call Send
000153 940c 0007                 	jmp Main
                                 load0:
000155 e435                      	LDI r19,num0
000156 940e 01c3                 	call Send
000158 ef30                      	LDI r19,stop
000159 940e 01c3                 	call send
00015b e435                      	LDI r19,num0
00015c 940e 01c3                 	call Send
00015e 940c 0007                 	jmp Main
                                 load1:
000160 e136                      	LDI r19,num1
000161 940e 01c3                 	call Send
000163 ef30                      	LDI r19,stop
000164 940e 01c3                 	call send
000166 e136                      	LDI r19,num1
000167 940e 01c3                 	call Send
000169 940c 0007                 	jmp Main
                                 load2:
00016b e13e                      	LDI r19,num2
00016c 940e 01c3                 	call Send
00016e ef30                      	LDI r19,stop
00016f 940e 01c3                 	call send
000171 e13e                      	LDI r19,num2
000172 940e 01c3                 	call Send
000174 940c 0007                 	jmp Main
                                 load3:
000176 e236                      	LDI r19,num3
000177 940e 01c3                 	call Send
000179 ef30                      	LDI r19,stop
00017a 940e 01c3                 	call send
00017c e236                      	LDI r19,num3
00017d 940e 01c3                 	call Send
00017f 940c 0007                 	jmp Main
                                 load4:
000181 e235                      	LDI r19,num4
000182 940e 01c3                 	call Send
000184 ef30                      	LDI r19,stop
000185 940e 01c3                 	call send
000187 e235                      	LDI r19,num4
000188 940e 01c3                 	call Send
00018a 940c 0007                 	jmp Main
                                 load5:
00018c e23e                      	LDI r19,num5
00018d 940e 01c3                 	call Send
00018f ef30                      	LDI r19,stop
000190 940e 01c3                 	call send
000192 e23e                      	LDI r19,num5
000193 940e 01c3                 	call Send
000195 940c 0007                 	jmp Main
                                 load6:
000197 e336                      	LDI r19,num6
000198 940e 01c3                 	call Send
00019a ef30                      	LDI r19,stop
00019b 940e 01c3                 	call send
00019d e336                      	LDI r19,num6
00019e 940e 01c3                 	call Send
0001a0 940c 0007                 	jmp Main
                                 load7:
0001a2 e33d                      	LDI r19,num7
0001a3 940e 01c3                 	call Send
0001a5 ef30                      	LDI r19,stop
0001a6 940e 01c3                 	call send
0001a8 e33d                      	LDI r19,num7
0001a9 940e 01c3                 	call Send
0001ab 940c 0007                 	jmp Main
                                 load8:
0001ad e33e                      	LDI r19,num8
0001ae 940e 01c3                 	call Send
0001b0 ef30                      	LDI r19,stop
0001b1 940e 01c3                 	call send
0001b3 e33e                      	LDI r19,num8
0001b4 940e 01c3                 	call Send
0001b6 940c 0007                 	jmp Main
                                 load9:
0001b8 e436                      	LDI r19,num9
0001b9 940e 01c3                 	call Send
0001bb ef30                      	LDI r19,stop
0001bc 940e 01c3                 	call send
0001be e436                      	LDI r19,num9
0001bf 940e 01c3                 	call Send
0001c1 940c 0007                 	jmp Main
                                 Send: ;controls clock and data line to send character
0001c3 efff                      	LDI r31,0b11111111
0001c4 e048                      	LDI r20,0b00001000 ;register used for counting down from 8
0001c5 9890                      	cbi PORTD,0;start of signal
0001c6 940e 01fd                 	call Wait
0001c8 98c7                      	cbi PORTB,7;bring data low, start bit
0001c9 940e 01fd                 	call Wait
0001cb 9a90                      	sbi PORTD,0
0001cc 940e 01fd                 	call Wait
0001ce 9890                      	cbi PORTD,0
                                 	loop_s:;loops 8 times
0001cf 940e 01fd                 	call Wait
0001d1 9a90                      	sbi PORTD,0 ;Bring clock high
0001d2 0000                      	nop ;Small time delay between clock up and data change
0001d3 0000                      	nop
0001d4 0000                      	nop
0001d5 0000                      	nop
0001d6 0000                      	nop
0001d7 bb38                      	OUT PORTB, r19 ;set data line to aappropraite value
0001d8 940e 01fd                 	call Wait
0001da 0000                      	nop;extra time delay
0001db 0000                      	nop
0001dc 0000                      	nop
0001dd 0000                      	nop
0001de 9890                      	cbi PORTD,0 ;bring clock low
0001df 0f33                      	LSL r19 ;shifts data along
0001e0 954a                      	DEC r20 ;decreases counting register
0001e1 f769                      	brne loop_s ;checks if counting register is zero, repeats if not
0001e2 9536                      	LSR r19 ;returns r19 MSB to original place
0001e3 273f                      	EOR r19,r31;checks if last bit sent is high or low
0001e4 940e 01fd                 	call Wait
0001e6 9a90                      	sbi PORTD,0
0001e7 0000                      	nop ;Small time delay between clock up and data change
0001e8 0000                      	nop
0001e9 0000                      	nop
0001ea 0000                      	nop
0001eb 0000                      	nop
0001ec bb38                      	OUT PORTB,r19;sends opposite of last bit (parity bit)
0001ed 940e 01fd                 	call Wait
0001ef 9890                      	cbi PORTD,0
0001f0 940e 01fd                 	call wait
0001f2 0000                      	nop
0001f3 0000                      	nop
0001f4 0000                      	nop
0001f5 0000                      	nop
0001f6 9a90                      	sbi PORTD,0 ;brings clockline high
0001f7 0000                      	nop
0001f8 0000                      	nop
0001f9 0000                      	nop
0001fa 0000                      	nop
0001fb 9ac7                      	sbi PORTB,7 ;brings dataline high
0001fc 9508                      	ret
                                 Wait: ;waits for 3569 nanoseconds, 43 clocks
0001fd e05d                      	LDI r21, 13
                                 	loop:
0001fe 955a                      	dec r21
0001ff f7f1                      	brne loop


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32A" register use summary:
x  :   0 y  :   0 z  :   0 r0 :  45 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:   3 r17:   2 r18:   2 r19:  74 r20:   2 
r21:   2 r22:  11 r23:  27 r24:   0 r25:   4 r26:   0 r27:  42 r28:   0 
r29:   0 r30:   8 r31:   2 
Registers used: 13 out of 35 (37.1%)

"ATmega32A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   1 adiw  :   0 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   9 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   6 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  83 cbi   :   6 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   9 cpse  :  45 dec   :   6 eor   :   1 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 inc   :   0 jmp   :  59 
ld    :   0 ldd   :   0 ldi   :  83 lds   :   0 lpm   :   0 lsl   :  16 
lsr   :   5 mov   :   0 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :  23 or    :   0 ori   :   0 out   :   6 pop   :   0 
push  :   0 rcall :   0 ret   :   2 reti  :   0 rjmp  :   0 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   6 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 19 out of 113 (16.8%)

"ATmega32A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000402   1026      0   1026   32768   3.1%
[.dseg] 0x000060 0x000060      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
